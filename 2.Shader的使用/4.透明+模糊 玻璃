Shader "Custom/NewSurfaceShader"
{
	Properties
	{
		_Scale("Scale",Range(0,0.1)) = 1
		_Color("BaseColor",Color) = (1,1,1,1)
	}
		SubShader
	{
		Tags{"Queue" = "Transparent"}
		//抓取屏幕图像
		  GrabPass{"_GrabTex"}

		  Pass
		  {
			  CGPROGRAM
			  #pragma vertex vert
			  #pragma fragment frag
			  #include "UnityCG.cginc"
			  struct v2f
			  {
			  float2 uv:TEXCOORD0;
			  };
			  sampler2D _GrabTex;

			  fixed4 _Color;
			  float _Scale;

			  v2f vert(float4 vertex:POSITION,out float4 pos : SV_POSITION)
			  {
				  v2f o;
				  pos = UnityObjectToClipPos(vertex);
				  return o;
			  }
			  fixed4 frag(v2f i, UNITY_VPOS_TYPE screenPos : VPOS) :SV_Target
			  {
				  fixed2 screenUV = screenPos.xy / _ScreenParams.xy;
	
				
				/*	fixed4 color = tex2D(_GrabTex, screenUV,float2(_Scale,_Scale),float2(_Scale,_Scale));*/

			  float2 uv1 = screenUV + float2(_Scale, _Scale);
			  fixed4 color1 = tex2D(_GrabTex, uv1);

			  float2 uv2 = screenUV + float2(-_Scale, _Scale);
			  fixed4 color2 = tex2D(_GrabTex, uv2);

			  float2 uv3 = screenUV + float2(-_Scale,-_Scale);
			  fixed4 color3 = tex2D(_GrabTex, uv3);

			  float2 uv4 = screenUV + float2(_Scale, -_Scale);
			  fixed4 color4 = tex2D(_GrabTex, uv4);

			  fixed4 sum=(color1+color2 + color3+color4) / 4;

			  //混合颜色

			  return (s*0.5)*_Color;
			  }
			  ENDCG

		  }
	}
		FallBack "Diffuse"
}
